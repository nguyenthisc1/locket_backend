openapi: 3.0.0
info:
  title: Conversation API
  description: API endpoints for managing conversations, groups, and threads
  version: 1.0.0

paths:
  /api/v1/conversations:
    post:
      summary: Create a new conversation
      description: Create a new direct message or group conversation
      tags: [Conversations]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - participants
              properties:
                name:
                  type: string
                  maxLength: 100
                  description: Conversation name (required for group chats)
                participants:
                  type: array
                  items:
                    type: string
                    format: ObjectId
                  minItems: 1
                  description: Array of user IDs to include in conversation
                isGroup:
                  type: boolean
                  default: false
                  description: Whether this is a group conversation
                admin:
                  type: string
                  format: ObjectId
                  description: Admin user ID for group conversations
                groupSettings:
                  type: object
                  properties:
                    allowMemberInvite:
                      type: boolean
                      default: true
                    allowMemberEdit:
                      type: boolean
                      default: false
                    allowMemberDelete:
                      type: boolean
                      default: false
                    allowMemberPin:
                      type: boolean
                      default: false
                settings:
                  type: object
                  properties:
                    muteNotifications:
                      type: boolean
                      default: false
                    customEmoji:
                      type: string
                      maxLength: 10
                    theme:
                      type: string
                      enum: [default, dark, light, custom]
                      default: default
                    wallpaper:
                      type: string
                      format: uri
            example:
              name: "My Group Chat"
              participants: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
              isGroup: true
              groupSettings:
                allowMemberInvite: true
                allowMemberEdit: false
              settings:
                muteNotifications: false
                theme: "default"
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Conversation created successfully"
                  data:
                    $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get user's conversations
      description: Retrieve all conversations for the authenticated user
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Number of conversations per page
      responses:
        '200':
          description: Conversations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Conversations retrieved successfully"
                  data:
                    $ref: '#/components/schemas/ConversationListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/conversations/search:
    get:
      summary: Search conversations
      description: Search conversations by name and filters
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Search query for conversation names
        - name: isGroup
          in: query
          schema:
            type: boolean
          description: Filter by group conversations only
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Number of conversations per page
      responses:
        '200':
          description: Conversations found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Conversations found successfully"
                  data:
                    $ref: '#/components/schemas/ConversationListResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/conversations/{conversationId}:
    get:
      summary: Get conversation by ID
      description: Retrieve a specific conversation with full details
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          description: Conversation ID
      responses:
        '200':
          description: Conversation retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Conversation retrieved successfully"
                  data:
                    $ref: '#/components/schemas/ConversationResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update conversation
      description: Update conversation settings and information
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          description: Conversation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  description: New conversation name
                groupSettings:
                  type: object
                  properties:
                    allowMemberInvite:
                      type: boolean
                    allowMemberEdit:
                      type: boolean
                    allowMemberDelete:
                      type: boolean
                    allowMemberPin:
                      type: boolean
                settings:
                  type: object
                  properties:
                    muteNotifications:
                      type: boolean
                    customEmoji:
                      type: string
                      maxLength: 10
                    theme:
                      type: string
                      enum: [default, dark, light, custom]
                    wallpaper:
                      type: string
                      format: uri
            example:
              name: "Updated Group Name"
              settings:
                muteNotifications: true
                theme: "dark"
      responses:
        '200':
          description: Conversation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Conversation updated successfully"
                  data:
                    $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete conversation
      description: Soft delete a conversation (only admin for groups)
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          description: Conversation ID
      responses:
        '200':
          description: Conversation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Conversation deleted successfully"
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/conversations/{conversationId}/participants:
    post:
      summary: Add participants to conversation
      description: Add new participants to a conversation
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          description: Conversation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: ObjectId
                  minItems: 1
                  description: Array of user IDs to add
            example:
              userIds: ["507f1f77bcf86cd799439013", "507f1f77bcf86cd799439014"]
      responses:
        '200':
          description: Participants added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Participants added successfully"
                  data:
                    $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Remove participant from conversation
      description: Remove a participant from a conversation
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          description: Conversation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: ObjectId
                  description: User ID to remove
            example:
              userId: "507f1f77bcf86cd799439013"
      responses:
        '200':
          description: Participant removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Participant removed successfully"
                  data:
                    $ref: '#/components/schemas/ConversationResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/conversations/{conversationId}/threads:
    get:
      summary: Get conversation threads
      description: Retrieve all threads for a conversation
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          description: Conversation ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Number of threads per page
      responses:
        '200':
          description: Threads retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Threads retrieved successfully"
                  data:
                    $ref: '#/components/schemas/ConversationListResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/conversations/{conversationId}/leave:
    post:
      summary: Leave conversation
      description: Leave a conversation (cannot leave if only participant)
      tags: [Conversations]
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          description: Conversation ID
      responses:
        '200':
          description: Left conversation successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Left conversation successfully"
        '400':
          description: Cannot leave conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "My Group Chat"
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        isGroup:
          type: boolean
          example: true
        admin:
          $ref: '#/components/schemas/User'
        groupSettings:
          type: object
          properties:
            allowMemberInvite:
              type: boolean
              example: true
            allowMemberEdit:
              type: boolean
              example: false
            allowMemberDelete:
              type: boolean
              example: false
            allowMemberPin:
              type: boolean
              example: false
        lastMessage:
          type: object
          properties:
            messageId:
              type: string
              format: ObjectId
            text:
              type: string
              example: "Hello everyone!"
            senderId:
              $ref: '#/components/schemas/User'
            timestamp:
              type: string
              format: date-time
        parentConversation:
          type: string
          format: ObjectId
          description: Parent conversation for threads
        threadInfo:
          type: object
          properties:
            parentMessageId:
              type: string
              format: ObjectId
            threadCount:
              type: integer
              example: 5
            lastThreadMessage:
              type: string
              format: date-time
        isActive:
          type: boolean
          example: true
        pinnedMessages:
          type: array
          items:
            type: string
            format: ObjectId
        settings:
          type: object
          properties:
            muteNotifications:
              type: boolean
              example: false
            customEmoji:
              type: string
              example: "🎉"
            theme:
              type: string
              example: "default"
            wallpaper:
              type: string
              format: uri
        startedAt:
          type: string
          format: date-time
        readReceipts:
          type: array
          items:
            type: object
            properties:
              userId:
                $ref: '#/components/schemas/User'
              lastReadMessageId:
                type: string
                format: ObjectId
              lastReadAt:
                type: string
                format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ConversationResponse:
      type: object
      properties:
        conversation:
          $ref: '#/components/schemas/Conversation'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        lastMessage:
          $ref: '#/components/schemas/Message'

    ConversationListResponse:
      type: object
      properties:
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
        pagination:
          $ref: '#/components/schemas/Pagination'

    User:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          example: "john_doe"
        avatarUrl:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        email:
          type: string
          format: email
          example: "john@example.com"

    Message:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          example: "507f1f77bcf86cd799439011"
        text:
          type: string
          example: "Hello everyone!"
        type:
          type: string
          enum: [text, image, video, sticker, file, audio, emote]
          example: "text"
        senderId:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        pages:
          type: integer
          example: 5

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Invalid email format"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 